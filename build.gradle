import net.fabricmc.loom.task.RemapJarTask

plugins {
    // Unlike most projects, we choose to pin the specific version of Loom.
    // This prevents a lot of issues where the build script can fail randomly because the Fabric Maven server
    // is not reachable for some reason, and it makes builds much more reproducible. Observation also shows that it
    // really helps to improve startup times on slow connections.
    id 'fabric-loom' version '1.4.1'
}

apply from: "${rootProject.projectDir}/gradle/fabric.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

archivesBaseName = project.archives_base_name
version = createVersionString()
group = project.maven_group

loom {
    mixin.defaultRefmapName = "mixins.sodium.refmap.json"
    accessWidenerPath = file("src/main/resources/sodium.accesswidener")
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }

    // only includes /src/desktop/java/net/caffeinemc/mods/sodium/desktop/LaunchWarn.java
    // this source set is should be compiled with Java 8
    launchWarn {
        java {
            srcDir "src/desktop/java"
        }
    }
}

tasks.named('compileLaunchWarnJava') {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set "api-dev"

    from sourceSets.api.output
}

tasks.register('remapApiJar', RemapJarTask) {
    dependsOn apiJar
    archiveClassifier.set "api"

    input = apiJar.archiveFile.get().asFile
    addNestedDependencies = false
}

build.dependsOn apiJar
build.dependsOn remapApiJar

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
    from sourceSets.launchWarn.output.classesDirs // add launch warn to the main jar
    manifest.attributes["Main-Class"] = "${project.main_class}"
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-block-view-api-v2", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
}

def createVersionString() {
    var builder = new StringBuilder()

    boolean release = project.hasProperty("build.release")

    String build_id = System.getenv("GITHUB_RUN_NUMBER")
    String mod_version = project.mod_version as String

    if (release) {
        builder.append(mod_version)
    } else {
        // Strip the existing pre-release version
        if (mod_version.contains('-')) {
            builder.append(mod_version.substring(0, mod_version.indexOf('-')))
        } else {
            builder.append(mod_version)
        }

        builder.append("-snapshot")
    }

    var minecraft_version = (project.minecraft_version as String)
    builder.append("+mc").append(minecraft_version)

    if (!release) {
        if (build_id != null) {
            builder.append("-build.${build_id}")
        } else {
            builder.append("-local")
        }
    }

    return builder.toString()
}