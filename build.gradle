import net.fabricmc.loom.task.RemapJarTask

plugins {
    // Unlike most projects, we choose to pin the specific version of Loom.
    // This prevents a lot of issues where the build script can fail randomly because the Fabric Maven server
    // is not reachable for some reason, and it makes builds much more reproducible. Observation also shows that it
    // really helps to improve startup times on slow connections.
    id 'fabric-loom' version '1.4.1'

    // This dependency is only used to determine the state of the Git working tree so that build artifacts can be
    // more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
    id 'org.ajoberstar.grgit' version '5.2.0'
}

apply from: "${rootProject.projectDir}/gradle/fabric.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}${getVersionMetadata()}"
group = project.maven_group

loom {
    mixin.defaultRefmapName = "mixins.sodium.refmap.json"
    accessWidenerPath = file("src/main/resources/sodium.accesswidener")
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }

    // only includes /src/desktop/java/net/caffeinemc/mods/sodium/desktop/LaunchWarn.java
    // this source set is should be compiled with Java 8
    launchWarn {
        java {
            srcDir "src/desktop/java"
        }
    }
}

tasks.named('compileLaunchWarnJava') {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set "api-dev"

    from sourceSets.api.output
}

tasks.register('remapApiJar', RemapJarTask) {
    dependsOn apiJar
    archiveClassifier.set "api"

    input = apiJar.archiveFile.get().asFile
    addNestedDependencies = false
}

build.dependsOn apiJar
build.dependsOn remapApiJar

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
    from sourceSets.launchWarn.output.classesDirs // add launch warn to the main jar
    manifest.attributes["Main-Class"] = "${project.main_class}"
}

repositories {
    // Log if any unknown repositories were added non-explicitly.
    forEach { repo ->
        if (repo.name == 'Fabric' || repo.name == 'Mojang' || repo.name == 'MavenRepo') {
            // We know these exist already.
            return
        }
        var url = repo.url as URI
        var protocol = url.getScheme()
        if (protocol == "file") {
            // Local repositories are most likely safe.
            return
        }
        println("[Sodium] Unknown repository \"${repo.name}\" with URL \"${url}\"")
    }
    Mojang {
        content {
            includeGroup('com.mojang')
        }
    }
    Fabric {
        content {
            includeGroup('net.fabricmc.fabric-api')
            includeGroup('net.fabricmc.unpick')
            includeGroup('net.fabricmc')
        }
    }
    // Most dependencies should be downloaded from maven central since they have the most strict security policy and most dependencies are just mirrored from maven central.
    MavenRepo {
        content {
            // OW2 ASM is an exception which we download directly from their maven server which is signed with their PGP key.
            excludeGroup('org.ow2.asm')
        }
    }
    maven {
        name 'ObjectWeb'
        url 'https://repository.ow2.org/nexus/content/repositories/releases'
        content {
            includeGroup('org.ow2.asm')
        }
    }
}

dependencies {
    // Fabric API
    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-block-view-api-v2", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version))
    // `fabricApi.module` does not work with deprecated modules, so add the module dependency manually.
    // This is planned to be fixed in Loom 1.4.
    modIncludeImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
}

def getVersionMetadata() {
    // CI builds only
    if (project.hasProperty("build.release")) {
        return "" // no tag whatsoever
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "+git.${id}"
    }

    // No tracking information could be found about the build
    return "+unknown"
}
